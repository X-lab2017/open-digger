{
  "sql":"\nSELECT\n  id,\n  argMax(name, time),\n  groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('quarter', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(avg, 2),\n    toUInt32(dateDiff('quarter', toStartOfQuarter(toDate('2015-1-1')), time))) AS avg,\n  groupArrayInsertAt(\n    [],\n    toUInt32(dateDiff('quarter', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(resolution_levels,\n    toUInt32(dateDiff('quarter', toStartOfQuarter(toDate('2015-1-1')), time))) AS levels,\n  groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('quarter', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(quantile_0, 2),\n    toUInt32(dateDiff('quarter', toStartOfQuarter(toDate('2015-1-1')), time))) AS quantile_0,groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('quarter', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(quantile_1, 2),\n    toUInt32(dateDiff('quarter', toStartOfQuarter(toDate('2015-1-1')), time))) AS quantile_1,groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('quarter', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(quantile_2, 2),\n    toUInt32(dateDiff('quarter', toStartOfQuarter(toDate('2015-1-1')), time))) AS quantile_2,groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('quarter', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(quantile_3, 2),\n    toUInt32(dateDiff('quarter', toStartOfQuarter(toDate('2015-1-1')), time))) AS quantile_3,groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('quarter', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(quantile_4, 2),\n    toUInt32(dateDiff('quarter', toStartOfQuarter(toDate('2015-1-1')), time))) AS quantile_4\nFROM\n(\n  SELECT\n    toStartOfQuarter(opened_at) AS time,\n    org_id AS id, argMax(org_login, time) AS name,\n    avg(resolution_duration) AS avg,\n    quantile(0)(resolution_duration) AS quantile_0,quantile(0.25)(resolution_duration) AS quantile_1,quantile(0.5)(resolution_duration) AS quantile_2,quantile(0.75)(resolution_duration) AS quantile_3,quantile(1)(resolution_duration) AS quantile_4,\n    [countIf(resolution_level = 0),countIf(resolution_level = 1),countIf(resolution_level = 2),countIf(resolution_level = 3)] AS resolution_levels\n  FROM\n  (\n    SELECT\n      repo_id,\n      argMax(repo_name, created_at) AS repo_name,\n      org_id,\n      argMax(org_login, created_at) AS org_login,\n      issue_number,\n      argMaxIf(action, created_at, action IN ('opened', 'closed' , 'reopened')) AS last_action,\n      argMax(issue_created_at,created_at) AS opened_at,\n      maxIf(created_at, action = 'closed') AS closed_at,\n      dateDiff('day', opened_at, closed_at) AS resolution_duration,\n      multiIf(resolution_duration <= 3, 0,resolution_duration <= 7, 1,resolution_duration <= 15, 2, 3) AS resolution_level\n    FROM gh_events\n    WHERE type = 'PullRequestEvent' AND pull_merged = 1 AND (org_id IN [1342004])\n    GROUP BY repo_id, org_id, issue_number\n    HAVING opened_at >= toDate('2015-1-1') AND opened_at < toDate('2017-1-1') AND last_action='closed'\n  )\n  GROUP BY id, time\n  \n)\nGROUP BY id\nORDER BY avg[-1] DESC\n    LIMIT 3",
  "modifiedOption": {
    "orgIds": [
      1342004
    ],
    "startYear": 2015,
    "endYear": 2016,
    "startMonth": 1,
    "endMonth": 12,
    "order": "DESC",
    "limit": 3,
    "limitOption": "all",
    "groupTimeRange": "quarter",
    "groupBy": "org"
  },
  "change_requests_duration_desc_3_all_org_quarter": [
    {
      "id": "1342004",
      "name": "google",
      "avg": [
        10.37,
        10.22,
        9,
        9.06,
        9.18,
        8.47,
        8.65,
        8.64
      ],
      "levels": [
        [
          "1277",
          "122",
          "73",
          "113"
        ],
        [
          "1692",
          "176",
          "91",
          "136"
        ],
        [
          "2095",
          "222",
          "100",
          "181"
        ],
        [
          "1616",
          "198",
          "128",
          "174"
        ],
        [
          "1774",
          "199",
          "116",
          "155"
        ],
        [
          "2052",
          "216",
          "120",
          "175"
        ],
        [
          "2236",
          "261",
          "151",
          "168"
        ],
        [
          "2187",
          "224",
          "148",
          "221"
        ]
      ],
      "quantile_0": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "quantile_1": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "quantile_2": [
        0,
        0,
        0,
        0.5,
        0,
        0,
        0,
        0
      ],
      "quantile_3": [
        2,
        2,
        2,
        3,
        2,
        2,
        2,
        2
      ],
      "quantile_4": [
        2024,
        1950,
        2326,
        933,
        1336,
        1731,
        1434,
        1431
      ]
    }
  ]
}