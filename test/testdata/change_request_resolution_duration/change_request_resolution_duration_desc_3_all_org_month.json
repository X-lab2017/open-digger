{
  "sql":"\nSELECT\n  id,\n  argMax(name, time),\n  groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('month', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(avg, 2),\n    toUInt32(dateDiff('month', toDate('2015-1-1'), time))) AS avg,\n  groupArrayInsertAt(\n    [],\n    toUInt32(dateDiff('month', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(resolution_levels,\n    toUInt32(dateDiff('month', toDate('2015-1-1'), time))) AS levels,\n  groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('month', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(quantile_0, 2),\n    toUInt32(dateDiff('month', toDate('2015-1-1'), time))) AS quantile_0,groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('month', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(quantile_1, 2),\n    toUInt32(dateDiff('month', toDate('2015-1-1'), time))) AS quantile_1,groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('month', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(quantile_2, 2),\n    toUInt32(dateDiff('month', toDate('2015-1-1'), time))) AS quantile_2,groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('month', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(quantile_3, 2),\n    toUInt32(dateDiff('month', toDate('2015-1-1'), time))) AS quantile_3,groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('month', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(quantile_4, 2),\n    toUInt32(dateDiff('month', toDate('2015-1-1'), time))) AS quantile_4\nFROM\n(\n  SELECT\n    toStartOfMonth(opened_at) AS time,\n    org_id AS id, argMax(org_login, time) AS name,\n    avg(resolution_duration) AS avg,\n    quantile(0)(resolution_duration) AS quantile_0,quantile(0.25)(resolution_duration) AS quantile_1,quantile(0.5)(resolution_duration) AS quantile_2,quantile(0.75)(resolution_duration) AS quantile_3,quantile(1)(resolution_duration) AS quantile_4,\n    [countIf(resolution_level = 0),countIf(resolution_level = 1),countIf(resolution_level = 2),countIf(resolution_level = 3)] AS resolution_levels\n  FROM\n  (\n    SELECT\n      repo_id,\n      argMax(repo_name, created_at) AS repo_name,\n      org_id,\n      argMax(org_login, created_at) AS org_login,\n      issue_number,\n      argMaxIf(action, created_at, action IN ('opened', 'closed' , 'reopened')) AS last_action,\n      argMax(issue_created_at,created_at) AS opened_at,\n      maxIf(created_at, action = 'closed') AS closed_at,\n      dateDiff('day', opened_at, closed_at) AS resolution_duration,\n      multiIf(resolution_duration <= 3, 0,resolution_duration <= 7, 1,resolution_duration <= 15, 2, 3) AS resolution_level\n    FROM gh_events\n    WHERE type = 'PullRequestEvent' AND (org_id IN [1342004])\n    GROUP BY repo_id, org_id, issue_number\n    HAVING opened_at >= toDate('2015-1-1') AND opened_at < toDate('2017-1-1') AND last_action='closed'\n  )\n  GROUP BY id, time\n  \n)\nGROUP BY id\nORDER BY avg[-1] DESC\n    LIMIT 3",
  "modifiedOption": {
    "orgIds": [
      1342004
    ],
    "startYear": 2015,
    "endYear": 2016,
    "startMonth": 1,
    "endMonth": 12,
    "order": "DESC",
    "limit": 3,
    "limitOption": "all",
    "groupTimeRange": "month",
    "groupBy": "org"
  },
  "change_request_resolution_duration_desc_3_all_org_month": [
    {
      "id": "1342004",
      "name": "google",
      "avg": [
        39.16,
        37.96,
        36.84,
        24.93,
        57.57,
        78.76,
        38.49,
        31.33,
        38.02,
        47.42,
        49.54,
        53.92,
        52.09,
        42.36,
        42.53,
        43.71,
        44.29,
        38.22,
        48.1,
        32.53,
        38.43,
        49.02,
        44.2,
        28.51
      ],
      "levels": [
        [
          "443",
          "48",
          "38",
          "94"
        ],
        [
          "549",
          "51",
          "30",
          "77"
        ],
        [
          "554",
          "73",
          "40",
          "102"
        ],
        [
          "725",
          "87",
          "42",
          "97"
        ],
        [
          "703",
          "75",
          "33",
          "111"
        ],
        [
          "503",
          "68",
          "45",
          "132"
        ],
        [
          "791",
          "101",
          "44",
          "137"
        ],
        [
          "831",
          "93",
          "54",
          "139"
        ],
        [
          "853",
          "93",
          "39",
          "141"
        ],
        [
          "780",
          "86",
          "59",
          "146"
        ],
        [
          "543",
          "81",
          "58",
          "117"
        ],
        [
          "590",
          "71",
          "58",
          "150"
        ],
        [
          "648",
          "86",
          "65",
          "138"
        ],
        [
          "856",
          "92",
          "55",
          "130"
        ],
        [
          "663",
          "71",
          "43",
          "146"
        ],
        [
          "670",
          "73",
          "47",
          "143"
        ],
        [
          "795",
          "102",
          "42",
          "144"
        ],
        [
          "948",
          "96",
          "81",
          "170"
        ],
        [
          "777",
          "88",
          "59",
          "130"
        ],
        [
          "908",
          "129",
          "67",
          "152"
        ],
        [
          "864",
          "107",
          "86",
          "144"
        ],
        [
          "878",
          "89",
          "66",
          "154"
        ],
        [
          "741",
          "87",
          "66",
          "171"
        ],
        [
          "877",
          "103",
          "62",
          "172"
        ]
      ],
      "quantile_0": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "quantile_1": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "quantile_2": [
        1,
        0,
        1,
        1,
        0,
        1,
        1,
        1,
        0,
        0,
        1,
        1,
        1,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        1,
        1,
        1
      ],
      "quantile_3": [
        5.5,
        3,
        4,
        3,
        3,
        7,
        4,
        4,
        3,
        4,
        6,
        7,
        6,
        3,
        5,
        5,
        4,
        4,
        4,
        4,
        5,
        4,
        6,
        4
      ],
      "quantile_4": [
        3017,
        2637,
        2353,
        2352,
        2903,
        2826,
        2326,
        2584,
        2697,
        2804,
        1954,
        2660,
        2734,
        2629,
        1876,
        1981,
        2582,
        2562,
        2483,
        2543,
        2126,
        2374,
        2345,
        2393
      ]
    }
  ]
}