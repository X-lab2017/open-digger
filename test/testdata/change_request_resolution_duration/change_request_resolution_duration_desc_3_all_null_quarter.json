{
  "sql":"\nSELECT\n  id,\n  argMax(name, time),\n  groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('quarter', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(avg, 2),\n    toUInt32(dateDiff('quarter', toStartOfQuarter(toDate('2015-1-1')), time))) AS avg,\n  groupArrayInsertAt(\n    [],\n    toUInt32(dateDiff('quarter', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(resolution_levels,\n    toUInt32(dateDiff('quarter', toStartOfQuarter(toDate('2015-1-1')), time))) AS levels,\n  groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('quarter', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(quantile_0, 2),\n    toUInt32(dateDiff('quarter', toStartOfQuarter(toDate('2015-1-1')), time))) AS quantile_0,groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('quarter', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(quantile_1, 2),\n    toUInt32(dateDiff('quarter', toStartOfQuarter(toDate('2015-1-1')), time))) AS quantile_1,groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('quarter', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(quantile_2, 2),\n    toUInt32(dateDiff('quarter', toStartOfQuarter(toDate('2015-1-1')), time))) AS quantile_2,groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('quarter', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(quantile_3, 2),\n    toUInt32(dateDiff('quarter', toStartOfQuarter(toDate('2015-1-1')), time))) AS quantile_3,groupArrayInsertAt(\n    NaN,\n    toUInt32(dateDiff('quarter', toDate('2015-1-1'), toDate('2016-12-1'))) + 1)(ROUND(quantile_4, 2),\n    toUInt32(dateDiff('quarter', toStartOfQuarter(toDate('2015-1-1')), time))) AS quantile_4\nFROM\n(\n  SELECT\n    toStartOfQuarter(opened_at) AS time,\n    repo_id AS id, argMax(repo_name, time) AS name,\n    avg(resolution_duration) AS avg,\n    quantile(0)(resolution_duration) AS quantile_0,quantile(0.25)(resolution_duration) AS quantile_1,quantile(0.5)(resolution_duration) AS quantile_2,quantile(0.75)(resolution_duration) AS quantile_3,quantile(1)(resolution_duration) AS quantile_4,\n    [countIf(resolution_level = 0),countIf(resolution_level = 1),countIf(resolution_level = 2),countIf(resolution_level = 3)] AS resolution_levels\n  FROM\n  (\n    SELECT\n      repo_id,\n      argMax(repo_name, created_at) AS repo_name,\n      org_id,\n      argMax(org_login, created_at) AS org_login,\n      issue_number,\n      argMaxIf(action, created_at, action IN ('opened', 'closed' , 'reopened')) AS last_action,\n      argMax(issue_created_at,created_at) AS opened_at,\n      maxIf(created_at, action = 'closed') AS closed_at,\n      dateDiff('day', opened_at, closed_at) AS resolution_duration,\n      multiIf(resolution_duration <= 3, 0,resolution_duration <= 7, 1,resolution_duration <= 15, 2, 3) AS resolution_level\n    FROM gh_events\n    WHERE type = 'PullRequestEvent' AND (org_id IN [1342004])\n    GROUP BY repo_id, org_id, issue_number\n    HAVING opened_at >= toDate('2015-1-1') AND opened_at < toDate('2017-1-1') AND last_action='closed'\n  )\n  GROUP BY id, time\n  \n)\nGROUP BY id\nORDER BY avg[-1] DESC\n    LIMIT 3",
  "modifiedOption": {
    "orgIds": [
      1342004
    ],
    "startYear": 2015,
    "endYear": 2016,
    "startMonth": 1,
    "endMonth": 12,
    "order": "DESC",
    "limit": 3,
    "limitOption": "all",
    "groupTimeRange": "quarter",
    "groupBy": null
  },
  "change_request_resolution_duration_desc_3_all_null_quarter": [{
    "id": "40198544",
    "name": "google/capirca",
    "avg": [null, null, 0, 46, 0.5, 44.08, 12, 35],
    "levels": [
      [],
      [],
      ["1", "0", "0", "0"],
      ["2", "2", "0", "2"],
      ["2", "0", "0", "0"],
      ["4", "2", "0", "7"],
      ["2", "1", "0", "1"],
      ["2", "0", "0", "2"]
    ],
    "quantile_0": [null, null, 0, 0, 0, 0, 0, 0],
    "quantile_1": [null, null, 0, 1, 0.25, 3, 0, 2.25],
    "quantile_2": [null, null, 0, 4.5, 0.5, 17, 3.5, 33.5],
    "quantile_3": [null, null, 0, 95.75, 0.75, 45, 15.5, 66.25],
    "quantile_4": [null, null, 0, 141, 1, 186, 41, 73]
  }, {
    "id": "24993103",
    "name": "google/woff2",
    "avg": [50.5, 20.9, 32, 8.5, 1.6, null, 0, 35],
    "levels": [
      ["2", "0", "0", "4"],
      ["4", "2", "1", "3"],
      ["1", "0", "0", "1"],
      ["0", "1", "1", "0"],
      ["4", "0", "1", "0"],
      [],
      ["1", "0", "0", "0"],
      ["0", "0", "0", "1"]
    ],
    "quantile_0": [0, 0, 2, 4, 0, null, 0, 35],
    "quantile_1": [9.25, 1.5, 17, 6.25, 0, null, 0, 35],
    "quantile_2": [41, 5, 32, 8.5, 0, null, 0, 35],
    "quantile_3": [71.25, 15, 47, 10.75, 0, null, 0, 35],
    "quantile_4": [141, 90, 62, 13, 8, null, 0, 35]
  }, {
    "id": "33881870",
    "name": "google/protobuf-gradle-plugin",
    "avg": [null, 3, 3.4, 16, 2.4, 20.5, 0.83, 28],
    "levels": [
      [],
      ["4", "2", "0", "0"],
      ["2", "3", "0", "0"],
      ["1", "0", "0", "1"],
      ["3", "2", "0", "0"],
      ["3", "2", "0", "1"],
      ["6", "0", "0", "0"],
      ["0", "0", "0", "1"]
    ],
    "quantile_0": [null, 0, 1, 0, 0, 1, 0, 28],
    "quantile_1": [null, 0.75, 2, 8, 0, 1, 0, 28],
    "quantile_2": [null, 3, 4, 16, 1, 2.5, 0.5, 28],
    "quantile_3": [null, 4.5, 4, 24, 4, 4.75, 1, 28],
    "quantile_4": [null, 7, 6, 32, 7, 111, 3, 28]
  }]
}